generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id             Int             @id @default(autoincrement())
  email          String          @unique
  password       String
  bio            String?
  username String @unique @default("user")
  chats          Chat[]
  groups         Group[]         @relation("GroupUsers")
  adminGroups    Group[]         @relation("GroupAdmin")
  statuses       Status[]
  groupMessages  GroupMessage[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  verificationCode String?
  isEmailVerified Boolean @default(false)
  expiresAt DateTime?


  following      Follow[]        @relation("UserFollowing")
  followers      Follow[]        @relation("UserFollowers")

  friends        User[]          @relation("UserFriends")
  friendOf       User[]          @relation("UserFriends")
}

model Follow {
  id         Int     @id @default(autoincrement())
  follower   User    @relation("UserFollowing", fields: [followerId], references: [id])
  followerId Int
  following  User    @relation("UserFollowers", fields: [followingId], references: [id])
  followingId Int

  createdAt  DateTime @default(now())

  @@unique([followerId, followingId])
}

model Chat {
  id        Int        @id @default(autoincrement())
  users     User[]
  messages  Message[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Status {
  id        Int      @id @default(autoincrement())
  content   String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comments  Comment[]
  likes     Like[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  status    Status   @relation(fields: [statusId], references: [id])
  statusId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  status    Status   @relation(fields: [statusId], references: [id])
  statusId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Group {
  id           Int            @id @default(autoincrement())
  groupName    String
  groupAdmin   User           @relation("GroupAdmin", fields: [groupAdminId], references: [id])
  groupAdminId Int
  users        User[]         @relation("GroupUsers")
  messages     GroupMessage[]
  createdAt    DateTime       @default(now())
}

model GroupMessage {
  id        Int      @id @default(autoincrement())
  content   String
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   Int
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  Int
  createdAt DateTime @default(now())
}
